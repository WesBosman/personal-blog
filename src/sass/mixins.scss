// Widths for different screen sizes
$phone-width: 420px;
$tablet-width: 768px;
$desktop-width: 1024px;

@mixin phone {
  @media ( max-width: #{$phone-width} ) {
    @content;
  }
}

@mixin tablet {
  @media ( min-width: #{$phone-width} ) and ( max-width: #{$desktop-width} ) {
    @content;
  }
}

@mixin desktop {
  @media ( min-width: #{$desktop-width} ) {
    @content;
  }
}

@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
    @content;
  }
}

@mixin spectrumBackground {
  background: linear-gradient(red, transparent),
    linear-gradient(to top left, lime, transparent),
    linear-gradient(to top right, blue, transparent);
  background-blend-mode: screen;
}

@mixin transition($seconds) {
  -webkit-transition-duration: $seconds;
  -moz-transition-duration: $seconds;
  -o-transition-duration: $seconds;
  transition-duration: $seconds;
}

@mixin rotate($degrees) {
  -moz-transform: rotate($degrees);
  -webkit-transform: rotate($degrees);
  -o-transform: rotate($degrees);
  -ms-transform: rotate($degrees);
  transform: rotate($degrees);
}

@mixin animateTransform($name, $from, $to) {
  @-webkit-keyframes #{$name} {
    from {
      transform: translateX(#{$to});
    }
    to {
      transform: translateX(#{$from});
    }
  }
  @-moz-keyframes #{$name} {
    from {
      transform: translateX(#{$to});
    }
    to {
      transform: translateX(#{$from});
    }
  }
  @-ms-keyframes #{$name} {
    from {
      transform: translateX(#{$to});
    }
    to {
      transform: translateX(#{$from});
    }
  }
  @keyframes #{$name} {
    from {
      transform: translateX(#{$to});
    }
    to {
      transform: translateX(#{$from});
    }
  }
}

@mixin animateOpacity($name, $from, $to) {
  @-webkit-keyframes #{$name} {
    from {
      opacity: #{$to};
    }
    to {
      opacity: #{$from};
    }
  }
  @-moz-keyframes #{$name} {
    from {
      opacity: #{$to};
    }
    to {
      opacity: #{$from};
    }
  }
  @-ms-keyframes #{$name} {
    from {
      opacity: #{$to};
    }
    to {
      opacity: #{$from};
    }
  }
  @keyframes #{$name} {
    from {
      opacity: #{$to};
    }
    to {
      opacity: #{$from};
    }
  }
}

@include animateTransform("slideIn", 0%, 150%);
@include animateTransform("slideOut", 100%, 0%);

@include animateOpacity("fadeIn", 0, 1);
@include animateOpacity("fadeOut", 1, 0);

$fade-in: fadeIn 0.25s linear forwards;
$fade-out: fadeOut 0.25s linear forwards;

$slide-in: slideIn 0.35s ease-out forwards;
$slide-out: slideOut 0.35s ease-in forwards;

// Magic parallax mixins
@mixin parallax-init($perspective: null, $element: null, $parallax-ios: null) {
  $perspective: if(
    $perspective != null,
    $perspective,
    toolkit-get("parallax perspective")
  );
  $element: if($element != null, $element, toolkit-get("parallax element"));
  $parallax-ios: if(
    $parallax-ios != null,
    $parallax-ios,
    toolkit-get("parallax ios")
  );

  @if $element == "body" {
    @at-root {
      html,
      body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
      }
      body {
        @include parallax-init-core($perspective, $parallax-ios);
      }
    }
  } @else {
    @if $element == this {
      @include parallax-init-core($perspective, $parallax-ios);
    } @else {
      @at-root #{$element} {
        @include parallax-init-core($perspective, $parallax-ios);
      }
    }
  }
}

@mixin parallax-init-core($perspective: null, $parallax-ios: null) {
  $perspective: if(
    $perspective != null,
    $perspective,
    toolkit-get("parallax perspective")
  );
  $parallax-ios: if(
    $parallax-ios != null,
    $parallax-ios,
    toolkit-get("parallax ios")
  );

  overflow: auto;
  @if mixin-exists(perspective) {
    @include perspective($perspective * 1px);
  } @else {
    -webkit-perspective: $perspective * 1px;
    perspective: $perspective * 1px;
  }
  // Allows for smooth scrolling but disables parallax effects.
  @if $parallax-ios == false {
    -webkit-overflow-scrolling: touch;
  }
  // Make sure 3D perspective is preserved
  &,
  & * {
    @if mixin-exists(transform-style) {
      @include transform-style(preserve-3d);
    } @else {
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
    }
  }
}

@mixin parallax($distance: null, $perspective: null) {
  $distance: if($distance != null, $distance, toolkit-get("parallax distance"));
  $perspective: if(
    $perspective != null,
    $perspective,
    toolkit-get("parallax perspective")
  );

  $transform: translateZ($distance * $perspective * 1px)
    scale(abs($distance - 1));

  @if mixin-exists(transform) {
    @include transform($transform);
  } @else {
    -webkit-transform: $transform;
    transform: $transform;
  }

  z-index: $distance * 100;
}
